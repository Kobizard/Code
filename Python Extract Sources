import os
import re
import pandas as pd

# Step 1: Load M expressions from Excel/CSV
folder_path = os.getcwd()
sheet_df = None

for f in os.listdir(folder_path):
    if f.endswith(".xlsx") and not f.startswith("~$"):
        df = pd.read_excel(f)
        if "Query_name" in df.columns and "M_expression" in df.columns:
            sheet_df = df
            print(f"‚úÖ Loaded: {f}")
            break
    elif f.endswith(".csv"):
        df = pd.read_csv(f)
        if "Query_name" in df.columns and "M_expression" in df.columns:
            sheet_df = df
            print(f"‚úÖ Loaded: {f}")
            break

if sheet_df is None:
    raise FileNotFoundError("‚ùå No file with 'Query_name' and 'M_expression' found.")

# Step 2: Build set of all Power Query names
all_query_names = set(sheet_df["Query_name"].astype(str).str.strip())

# Step 3: Regex patterns for source detection
patterns = [
    (r'\[([^\]]+)\]\.\[([^\]]+)\]', lambda m: f"[{m.group(1)}].[{m.group(2)}]"),
    (r'SharePoint\.Files\("([^"]+)"', lambda m: f"SharePoint ({m.group(1)})"),
    (r'Excel\.Workbook\(([^,\)]+)', lambda m: f"Excel Workbook ({m.group(1).strip()})"),
    (r'Databricks\.Catalogs\([^)]+\)', lambda m: "Databricks (Source)"),
    (r'Name\s*=\s*"(?P<table>\w+)",\s*Kind\s*=\s*"Table"\]\}\[Data\]', lambda m: f"{m.group('table')} (Databricks Table)"),
    (r'(\w+)\s*=\s*\w+\{\[Name\s*=\s*"(?P<schema>\w+)",\s*Kind\s*=\s*"Schema"\]\}\[Data\]', lambda m: f"{m.group('schema')} (Databricks Schema Ref)"),
    (r'Table\.FromRows|List\.Max|List\.Generate|#"\w+"', lambda m: "In-Memory / Generated Table"),
    # Enhanced SQL FROM/JOIN extraction (handles brackets, unbracketed, nested)
    (r'\b(?:FROM|JOIN|INNER JOIN|LEFT JOIN|RIGHT JOIN|FULL JOIN|CROSS JOIN)\s+((?:\[?\w+\]?\.){1,2}(?:\[?\w+\]?))',
     lambda m: m.group(1))
]

# Step 4: Extract direct sources
query_sources = {}

for _, row in sheet_df.iterrows():
    query_name = str(row["Query_name"]).strip()
    raw_expression = str(row["M_expression"]).strip()

    # Normalize Power Query stringified SQL
    expression = (
        raw_expression.replace("#(lf)", "\n")
                      .replace("#(tab)", "\t")
                      .replace("#(cr)", "\r")
    )

    found_sources = set()

    # Simple "= QueryName" reference
    if expression.startswith("=") and "(" not in expression:
        ref = expression[1:].strip()
        if ref in all_query_names:
            found_sources.add(ref)

    for pattern, format_fn in patterns:
        for match in re.finditer(pattern, expression, flags=re.IGNORECASE | re.MULTILINE):
            found_sources.add(format_fn(match))

    # Explicit references to other query names
    for other in all_query_names:
        if other != query_name and re.search(rf'\b#?"?{re.escape(other)}"?\b', expression):
            found_sources.add(other)

    query_sources[query_name] = list(found_sources)

# Step 5: Merge Databricks schema/table logic
def merge_databricks_sources(sources):
    schema = None
    tables = []
    others = []
    for s in sources:
        if s.endswith("(Databricks Schema Ref)"):
            schema = s.split(" ")[0]
        elif s.endswith("(Databricks Table)"):
            tables.append(s.split(" ")[0])
        else:
            others.append(s)
    if schema and tables:
        return others + [f"Databricks-{schema}.{t}" for t in tables]
    return others + tables

# Step 6: Resolve recursively
def resolve_sources(query, visited=None):
    if visited is None:
        visited = set()
    if query in visited:
        return set()

    direct = query_sources.get(query, [])
    resolved = set()
    for src in direct:
        if src in all_query_names:
            resolved.update(resolve_sources(src, visited | {query}))
        else:
            resolved.add(src)

    resolved = {r for r in resolved if r != "No source detected"}
    return set(merge_databricks_sources(resolved)) or {"No source detected"}

# Step 7: Build final flat table
records = []
for query in sorted(all_query_names):
    for source in sorted(resolve_sources(query)):
        records.append((query, source))

df_result = pd.DataFrame(records, columns=["Query Name", "Table/Folder"])
df_result.to_excel("Resolved_Sources_by_Query.xlsx", index=False)
print("üìÅ Saved as: Resolved_Sources_by_Query.xlsx")
